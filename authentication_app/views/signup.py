from .utils import Util
from rest_framework import status
from .decorators import is_verified
from rest_framework import generics
from rest_framework.views import APIView
from datetime import datetime, timedelta
from rest_framework.response import Response
from ..serializers.signup import EmailVerificationSerializer, SignUpSerializer, CompleteProfileSerializer
from rest_framework_simplejwt.tokens import AccessToken
from django.utils.decorators import method_decorator


#################################### Sign Up View ########################################
class SignUpView(generics.GenericAPIView):
    """
    View for user signup that takes email and sends an email verification 
    with an account activation link containing an access token generated by JWT.
    """  
    serializer_class = SignUpSerializer 

    def post(self, request):
        serializer = self.serializer_class(data=request.data)
        serializer.is_valid(raise_exception=True)
        email = serializer.validated_data.get('email')
        Util.send_verificationEmail(request=request,email=email)
        return Response({"message": "Email sent successfully"}, status=status.HTTP_200_OK)


############################### Email Verification View# ####################################
class EmailVerificationView(generics.GenericAPIView):
    """ 
    View for email verification that takes an token generated by JWT
    and redirects the user to the welcome page.
    """
    serializer_class = EmailVerificationSerializer

    def get(self, request):
        #convert quey params to dictionary and value of each key to str
        data = {key: str(value) for key, value in request.query_params.items()}
        serializer = self.serializer_class(data=data)
        serializer.is_valid(raise_exception=True)
        new_user = serializer.save()
        info = serializer.validated_data
        access_token = AccessToken.for_user(new_user)
        access_token.__setitem__("aud", "link-signature-validator")
        access_token.__setitem__("sub", info["email"])
        access_token.__setitem__("scope", "welcome")
        access_token.__setitem__("iss", "micros/sign-in")
        access_token.__setitem__("redirectType", "signup")
        access_token.set_exp(lifetime=timedelta(hours=1))

        redirect_to = info["continuue"]
        print(redirect_to)
        response = Response({"message": "Verification successful."}, status=status.HTTP_200_OK)
        response.set_cookie(
            key='token',
            value=str(access_token),
            httponly=True,
            secure=True,
            samesite='Lax' # or 'Strict' : to search Later
        )
        response['Location'] = redirect_to
        response.status_code = 302
        return response


class CompleteProfileView(APIView):
    """ 
    View for Complete Profile that takes a token generated by JWT
    """
    
    serializer_class = CompleteProfileSerializer

    def post(self, request) -> Response:
        print("----->>", request.data)
        serializer = self.serializer_class(data=request.data, context={'request': request})
        serializer.is_valid(raise_exception=True)
        serializer.save()

        return Response(
            {"message": "Profile completed successfully"},
            status=status.HTTP_200_OK,
        )