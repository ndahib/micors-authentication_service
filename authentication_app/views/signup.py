import os
from .utils import Util
from rest_framework import status
from .decorators import is_verified
from rest_framework import generics
from rest_framework.views import APIView
from datetime import datetime, timedelta
from rest_framework.response import Response
from ..serializers.signup import EmailVerificationSerializer, SignUpSerializer, CompleteProfileSerializer
from rest_framework_simplejwt.tokens import AccessToken


#################################### Sign Up View ########################################
class SignUpView(generics.GenericAPIView):
    """
    View for user signup that takes email and sends an email verification 
    with an account activation link containing an access token generated by JWT.
    """  
    serializer_class = SignUpSerializer 

    def post(self, request):
        serializer = self.serializer_class(data=request.data)
        serializer.is_valid(raise_exception=True)
        email = serializer.validated_data.get('email')
        Util.send_verificationEmail(request=request,email=email)
        return Response({"message": "Email sent successfully"}, status=status.HTTP_200_OK)


############################### Email Verification View# ###################################
class EmailVerificationView(generics.GenericAPIView):
    """
    View for email verification that takes an token generated by JWT
    and redirects the user to the welcome page.
    """
    serializer_class = EmailVerificationSerializer

    def get(self, request):
        query_params = {key: str(value) for key, value in request.query_params.items()}
        serializer = self.serializer_class(data=query_params)
        serializer.is_valid(raise_exception=True)
        user, access_token = serializer.save()

        response = Response({"message": "Verification successful."}, status=status.HTTP_200_OK)
        response.set_cookie(
            key='token',
            value=str(access_token),
            httponly=True,
            secure=True,
            samesite='Strict'
        )
        response['Location'] = os.environ.get("WELCOME_FRONTEND_URL")
        response.status_code = 302
        return response



####################Complete Profile View ##############################################
class CompleteProfileView(APIView):
    """View for completing a user's profile that takes a token generated by JWT."""

    serializer_class = CompleteProfileSerializer

    @is_verified
    def post(self, request) -> Response:
        """Handles the POST request to complete a user's profile."""
        serializer = self.serializer_class(data=request.data, context={"request": request})
        serializer.is_valid(raise_exception=True)
        user = serializer.save()
        tokens = user.tokens()
        response = Response({"message": "Profile completed successfully", 
                            "refresh": tokens["refresh"]},
                            status=status.HTTP_200_OK)
        response.set_cookie("access", tokens["access"], httponly=True, secure=True, samesite="Lax")
        return response

